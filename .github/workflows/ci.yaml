name: Comprehensive CI Pipeline

on:
  push:
    branches:
      - '**' # Trigger on all branches
  pull_request:
    branches:
      - '**' # Trigger on all branches
    types:
      - opened
      - reopened
  workflow_dispatch: # Allow manual triggering of the workflow

permissions:
  security-events: write # Required for uploading SARIF results
 
jobs:
  ci:
    name: Run CI Pipeline
    strategy:
      matrix:
        runner: [ubuntu-latest] # GitHub-hosted runner
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 10
    steps:
      # Step 1: Clone the Repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.7  # Use Python 3.12.7 for the project

      # Step 3: Verify Python Version
      - name: Verify Python Version
        run: python --version

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      # Step 5: Cache Dependencies
      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 6: Test Linting
      - name: Run Linting
        uses: github/super-linter@v5
        env:
          VALIDATE_PYTHON_PYLINT: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Step 7: Test Dependency Security Vulnerabilities
      - name: Check Dependency Security Vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          args: check --full-report
          api-key: ${{ secrets.SAFETY_API_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.SAMHAIL_TOKEN}}
        continue-on-error: true

      # Step 8: Test Application Security Vulnerabilities
      - name: Run Bandit Security Checks
        run: |
          python -m bandit -r models/base_models
        continue-on-error: true

      # Step 9: Run Unit Tests and Generate Coverage Report
      - name: Run Unit Tests
        run: |
          python -m pytest --cov=models/ --cov-report=xml

      # Step 10: Upload coverage reports to Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
